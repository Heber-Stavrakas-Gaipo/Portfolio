<script>
  const url = "https://api.github.com/users/Heber-Stavrakas-Gaipo";
  const e = (error) => console.error(error);

  // function displayProjectNames() {
  //   axios
  //     .get(`${url}/repos`)
  //     .then((response) => {
  //       const projects = response.data;

  //       // Ordenar os projetos pelo ID
  //       projects.sort((a, b) => a.id - b.id);

  //       projects.forEach((project, index) => {
  //         const projectNameElement = document.querySelector(
  //           `#project${index + 1}Name`
  //         );
  //         if (projectNameElement) {
  //           projectNameElement.textContent = project.name;
  //         }
  //       });
  //     })
  //     .catch(e);
  // }

  // displayProjectNames();

  // function projectLinks() {
  //   axios
  //     .get(`${url}/repos`)
  //     .then((response) => {
  //       const projects = response.data;

  //       // Ordenar os projetos pelo ID
  //       projects.sort((a, b) => a.id - b.id);

  //       projects.forEach((project, index) => {
  //         const projectLinkElement = document.querySelector(
  //           `#project${index + 1}Link`
  //         );
  //         if (projectLinkElement) {
  //           projectLinkElement.setAttribute("href", project.html_url);
  //         }
  //       });
  //     })
  //     .catch(e);
  // }

  // projectLinks();

  // function getDescriptions() {
  //   axios
  //     .get(`${url}/repos`)
  //     .then((response) => {
  //       const projects = response.data;

  //       // Ordenar os projetos pelo ID
  //       projects.sort((a, b) => a.id - b.id);

  //       projects.forEach((project, index) => {
  //         const projectDscElement = document.querySelector(
  //           `#project${index + 1}Dsc`
  //         );
  //         if (projectDscElement) {
  //           projectDscElement.textContent = project.description;
  //         }
  //       });
  //     })
  //     .catch(e);
  // }
  // getDescriptions();

  // function getGithubUserName() {
  //   axios
  //     .get(url)
  //     .then((response) => {
  //       githubUserName.textContent = response.data.login;
  //     })
  //     .catch(e);
  // }
  // getGithubUserName();

  // function getStars() {
  //   axios
  //     .get(`${url}/repos`)
  //     .then((response) => {
  //       const projects = response.data;

  //       // Ordenar os projetos pelo ID
  //       projects.sort((a, b) => a.id - b.id);

  //       projects.forEach((project, index) => {
  //         const projectStarElement = document.querySelector(
  //           `#project${index + 1}Stars`
  //         );
  //         if (projectStarElement) {
  //           projectStarElement.textContent = project.stargazers_count;
  //         }
  //       });
  //     })
  //     .catch(e);
  // }
  // getStars();

  // function getForks() {
  //   axios
  //     .get(`${url}/repos`)
  //     .then((response) => {
  //       const projects = response.data;

  //       // Ordenar os projetos pelo ID
  //       projects.sort((a, b) => a.id - b.id);

  //       projects.forEach((project, index) => {
  //         const projectForkElement = document.querySelector(
  //           `#project${index + 1}Forks`
  //         );
  //         if (projectForkElement) {
  //           projectForkElement.textContent = project.forks;
  //         }
  //       });
  //     })
  //     .catch(e);
  // }
  // getForks();

  // function getLanguage() {
  //   axios
  //     .get(`${url}/repos`)
  //     .then((response) => {
  //       const projects = response.data;

  //       // Ordenar os projetos pelo ID
  //       projects.sort((a, b) => a.id - b.id);

  //       projects.forEach((project, index) => {
  //         const projectLanguageElement = document.querySelector(
  //           `#project${index + 1}Language`
  //         );

  //         if (projectLanguageElement) {
  //           projectLanguageElement.textContent = project.language;
  //           projectLanguageElement.classList.add(
  //             `language-${project.language.toLowerCase()}`
  //           );
  //         }
  //       });
  //     })
  //     .catch(e);
  // }
  // getLanguage();

  // function to set a given theme/color-scheme

  const sons = document.querySelectorAll(".img");
  sons.forEach(son => {
    const parent = son.parentElement;
    parent.style.backgroundColor = "#8257e5";
  });

  function setTheme(themeName) {
    localStorage.setItem("theme", themeName);
    document.documentElement.className = themeName;
  }

  const iaForDevsCertificate = document.querySelector("#ia-para-devs");
  const nlwAiCertificate = document.querySelector("#nlw-ai");

  // function to toggle between light and dark theme
  function toggleTheme() {
    const switchButton = document.querySelector("#switch");
    if (localStorage.getItem("theme") === "theme-light") {
      switchButton.setAttribute("title", "Alterar para tema claro");
      iaForDevsCertificate.setAttribute(
        "src",
        "/certificates/certificate-ia-para-devs-default.png"
      );
      nlwAiCertificate.setAttribute(
        "src",
        "/certificates/certificate-nlw-ia-default.png"
      );
      setTheme("theme-default");
    } else {
      switchButton.setAttribute("title", "Alterar para tema escuro");
      iaForDevsCertificate.setAttribute(
        "src",
        "/certificates/certificate-ia-para-devs-light.png"
      );
      nlwAiCertificate.setAttribute(
        "src",
        "/certificates/certificate-nlw-ia-light.png"
      );
      setTheme("theme-light");
    }
  }

  // Immediately invoked function to set the theme on initial load
  document.addEventListener("DOMContentLoaded", function () {
    if (localStorage.getItem("theme") === "theme-default") {
      setTheme("theme-default");
      document.getElementById("slider").checked = false;
      iaForDevsCertificate.setAttribute(
        "src",
        "/certificates/certificate-ia-para-devs-default.png"
      );
      nlwAiCertificate.setAttribute(
        "src",
        "/certificates/certificate-nlw-ia-default.png"
      );
    } else {
      setTheme("theme-light");
      document.getElementById("slider").checked = true;
      iaForDevsCertificate.setAttribute(
        "src",
        "/certificates/certificate-ia-para-devs-light.png"
      );
      nlwAiCertificate.setAttribute(
        "src",
        "/certificates/certificate-nlw-ia-light.png"
      );
    }

    // Add event listener to the theme switcher button
    document.querySelector("#switch").addEventListener("click", toggleTheme);
  });

  document.querySelector("body").setAttribute("class", "hide-scrollbar");

  window.addEventListener("load", function () {
    // Quando a página estiver completamente carregada, oculta a tela de loading com transição suave
    const loadingScreen = document.getElementById("loadingScreen");
    loadingScreen.style.opacity = 0; // Definimos a opacidade para 0 (completamente transparente)

    // Aguarda um pequeno intervalo antes de remover a tela de loading
    setTimeout(function () {
      loadingScreen.style.display = "none";
    }, 0); // A transição tem duração de 0.3 segundos (300 milissegundos)

    // Remove a classe que oculta a scrollbar
    document.body.classList.remove("hide-scrollbar");
  });

  const scrollButton = document.querySelector(".scroll-to-top");

  // Mostrar a seta quando o usuário rolar a página
  window.addEventListener("scroll", () => {
    if (window.pageYOffset > 200) {
      scrollButton.classList.add("active");
      scrollButton.setAttribute("title", "Voltar para o topo");
    } else {
      scrollButton.classList.remove("active");
    }
  });

  // Rolagem suave para o topo quando a seta for clicada
  scrollButton.addEventListener("click", () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  });

  // Obtém o elemento <a> de cada link da header
  const paginaInicialLink = document.getElementById("home");
  const sobreMimLink = document.getElementById("about");
  const certificadosLink = document.getElementById("certificates");

  // Obtém o nome da página atual da URL (assumindo que sua URL seja algo como "http://seusite.com/pagina-inicial.html")
  const paginaAtual = window.location.href.split("/").pop();

  // Função para atualizar as classes com base na página atual
  function atualizarEstiloDaHeader() {
    // Remove todas as classes ativas primeiro
    paginaInicialLink.classList.remove("ativo");
    sobreMimLink.classList.remove("ativo");
    certificadosLink.classList.remove("ativo");

    // Adiciona a classe ativa apenas à página correspondente
    if (paginaAtual === "") {
      paginaInicialLink.classList.add("ativo");
    } else if (paginaAtual === "about") {
      sobreMimLink.classList.add("ativo");
    } else if (paginaAtual === "certificates") {
      certificadosLink.classList.add("ativo");
    }
  }

  // Chama a função inicialmente para configurar o estilo com base na página atual
  atualizarEstiloDaHeader();
</script>
